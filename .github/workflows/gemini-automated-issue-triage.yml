name: 'üè∑Ô∏è Gemini Automated Issue Triage'

on:
  issues:
    types:
      - 'opened'
      - 'reopened'
  issue_comment:
    types:
      - 'created'
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'issue number to triage'
        required: true
        type: 'number'

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'read'
  id-token: 'write'
  issues: 'write'
  statuses: 'write'

jobs:
  triage-issue:
    if: |-
      github.event_name == 'issues' ||
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issue_comment' &&
        contains(github.event.comment.body, '@gemini-cli /triage') &&
        contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)
      )
    timeout-minutes: 5
    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Run Gemini Issue Triage'
        uses: 'google-github-actions/run-gemini-cli@v0'
        id: 'gemini_issue_triage'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          GH_TOKEN:     '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}' # helps gh auth
          ISSUE_TITLE:  '${{ github.event.issue.title }}'
          ISSUE_BODY:   '${{ github.event.issue.body }}'
          ISSUE_NUMBER: '${{ github.event.issue.number }}'
          REPOSITORY:   '${{ github.repository }}'
        with:
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "maxSessionTurns": 25,
              "tools": {
                "run_shell_command": {
                  "enabled": true,
                  "forbidCommandSubstitution": true,
                  "allowed": [
                    "echo",
                    "gh label list",
                    "gh issue edit",
                    "gh auth status"
                  ]
                }
              },
              "telemetry": {
                "enabled": false,
                "target": "gcp"
              }
            }
          prompt: |-
            ## Role
            You are an issue triage assistant. You MUST act, not narrate.

            ## Tools
            You can execute shell commands via a tool named **run_shell_command**.
            - Always call this tool to run commands; do NOT merely describe them.
            - Allowed commands (and nothing else): `gh auth status`, `gh label list`, `gh issue edit`, `echo`.
            - No command substitution ($(), <(...), >(...)).
            - Reference env vars as quoted "${VAR}".

            ### Example of tool use
            User: list labels
            Assistant -> run_shell_command: gh label list
            (tool returns stdout)
            Assistant: (use the returned text to decide next actions)

            ## Inputs
            - Issue title: "${ISSUE_TITLE}"
            - Issue body: "${ISSUE_BODY}"
            - Issue number: "${ISSUE_NUMBER}"
            - Repo: "${REPOSITORY}"

            ## Task
            1) Verify auth: run `gh auth status`.
            2) List labels: run `gh label list`.
            3) Choose the best-fit labels for kind/* and priority/* that ALREADY exist.
               - Prefer: kind/documentation, kind/enhancement, kind/bug, etc.
               - Prefer: priority/p0..p3.
               - If a preferred label doesn't exist, pick the closest existing alternative; do NOT create new labels.
            4) Apply them:
               - `gh issue edit "${ISSUE_NUMBER}" --add-label "label1,label2"`
               - If "status/needs-triage" exists on the issue, also:
                 `gh issue edit "${ISSUE_NUMBER}" --remove-label "status/needs-triage"`

            ## Output rules
            - DO NOT ask me questions.
            - DO NOT just say ‚Äúready‚Äù or ‚Äúdone‚Äù.
            - Execute the steps via run_shell_command, and after each tool call, continue until labels are applied.
            - At the end, print a single line: OK: <comma-separated labels applied> (and note if needs-triage removed).

            ## Begin by running:
            - run_shell_command: gh auth status

      - name: 'Post Issue Triage Failure Comment'
        if: |-
          ${{ failure() && steps.gemini_issue_triage.outcome == 'failure' }}
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            github.rest.issues.createComment({
              owner: '${{ github.repository }}'.split('/')[0],
              repo: '${{ github.repository }}'.split('/')[1],
              issue_number: '${{ github.event.issue.number }}',
              body: 'There is a problem with the Gemini CLI issue triaging. Please check the [action logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })
